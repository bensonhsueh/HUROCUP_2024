#! /usr/bin/python
import rospy
import numpy as np
import cv2

from op3_ros_utils import getWalkingParams, Robot
from vision import *
from detect_marker import *
from copy import copy
import sys
import time

# DEBUG_MODE = True # Show the detected image
# DEBUG_MARKER = True
# DL_MODE = True    from cv_bridge.boost.cv_bridge_boost import getCvType

DEBUG_MODE = True # Show the detected image
DEBUG_MARKER = True
DL_MODE = False

MIN_AREA = 5000
SLOWDOWN_AREA = 40000
CROSS_AREA = 45000

class States:
    INIT = -1
    READY = 0 # Waits for start button
    WALK_FORWARD = 1 # Moves the head, looking for the ball
    WALK_SLOWLY_FORWARD = 2
    WALK_PREBACKWARDS = 3
    WALK_BACKWARDS = 4
    MARKER_TURN_LEFT = 5
    MARKER_TURN_RIGHT = 6
    MARKER_FORWARD = 7
    END = 99

# class Label:
#     FORWARD = 1
#     LEFT = 2
#     RIGHT = 3
    
marker = [999, States.MARKER_FORWARD, States.MARKER_TURN_LEFT, States.MARKER_TURN_RIGHT]

# Functions to be passed to vision system
# func1 = detectSingleColor
print('aaa')
func1 = detect3Color
print('bbb')
args1 = np.array(( (np.array([85, 68, 0]), np.array([179, 255, 255])),  #blue hsv
                    (np.array([0, 0, 14]), np.array([179, 146, 255])), #green
                    (np.array([0, 148, 68]), np.array([165, 255, 255])),)) #red lab
print('ccc')
# Create vision system
vision = VisionSystem(pipeline_funcs=[func1],
                      pipeline_args=[args1], debug=DEBUG_MODE, verbose=0)
print('ddd')

if DL_MODE:
    ssd = Detectnet(debug=DEBUG_MARKER, verbose=0)
    rospy.Subscriber("/detectnet/detections", Detection2DArray, ssd.read)
else:
    vvv=0
    rospy.Subscriber("/cv_camera/image_raw", Image, vision.read, queue_size=1)
    rospy.Subscriber("/video_source/raw", Image, vision.read)
print('eee')
# Subscribe to cv_camera topic with vision system


# Iinitialize Node
rospy.init_node("fira_sprint")
print('fff')
# Create robot
robot = Robot()
print('ggg')
rospy.sleep(3) # Make sure every publisher has registered to their topic,
               # avoiding lost messages

def init():
    # Set ctrl modules of all actions to joint, so we can reset robot position 
    # robot.setGeneralControlModule("action_module")

    # robot.setGrippersPos(left=0.0, right=0.0)

    # Call initial robot position
    # robot.playMotion(1, wait_for_end=True)

    # Set ctrl module to walking, this actually only sets the legs
    robot.setGeneralControlModule("walking_module")
    
    # Set joint modules of head joints to none so we can control them directly
    robot.setJointsControlModule(["head_pan", "head_tilt"], ["none", "none"])

    robot.setJointPos(["head_tilt"], [-1])
    robot.setJointPos(["head_pan"], [0])

    rospy.sleep(1.0)

def center_head_on_object(obj_pos):
    cx, cy = 0.5, 0.5 # Center of image
    obj_x, obj_y = obj_pos

    dist_x = obj_x - cx
    dist_y = obj_y - cy

    head_curr_x = robot.joint_pos["head_pan"]
    #head_curr_y = robot.joint_pos["head_tilt"]

    kp = 0.5
    new_head_x = head_curr_x + kp * -dist_x
    #new_head_y = head_curr_y + kp * -dist_y
    
    new_head_x = np.clip(new_head_x, np.radians(-45), np.radians(45))
    print("head", new_head_x)
    robot.setJointPos(["head_pan"], [new_head_x])
    
# def scan_next_marker():
    
print('hhh')
tickrate = 60
rate = rospy.Rate(tickrate)

# TODO remember to put to 0
STEP_LEVEL = 0
pos = (0.5, 0.5)
currState = States.INIT
robot.joint_pos["head_pan"] = 0

while not rospy.is_shutdown():
    # print(vision.status[0])
    if robot.buttonCheck("mode"):
        print('iii')
        STEP_LEVEL = 0
        if currState != States.INIT:
            robot.walkStop()
        currState = States.INIT
    
    if DEBUG_MODE:
        print('jjj')
        cv2.imshow("raw", vision.debug_img[0])
        #if vision.status[0]:
        #    cv2.imshow("result", vision.results[0])
        cv2.waitKey(1)
        
    
    if vision.status[0]:
        print('kkk')
        pos, obj_area = vision.results[0]
        print("Area: {}".format(obj_area))
        if obj_area > MIN_AREA and currState not in marker :
            center_head_on_object(pos)

    if currState == States.INIT:
        print('lll')
        print("[INIT]")
        init()
        
        # Transition
        tick_count = 0
        direction = False
        print("[waut for buttom]")  
        while not robot.buttonCheck("start"):
            time.sleep(0.1)
            
        robot.setJointsControlModule(["head_pan", "head_tilt"], ["none", "none"])
        robot.setJointPos(["head_pan", "head_tilt"], [0, -1])
        tick_count = 0
        currState = States.READY

    # elif currState == States.READY:
        # print("[READY]")

        
        
        

        
    
    rate.sleep()
